#include <vector>
#include <unordered_map>
#include <iostream>
#include <functional>
using namespace std;

int maxHappyGroups(int batchSize, vector<int>& groups) {
    vector<int> remainders(batchSize, 0);
    for (int g : groups) {
        ++remainders[g % batchSize];
    }

    function<int(vector<int>&, int)> dfs = [&](vector<int>& state, int carry) {
        int hash = carry;
        for (int r : state) {
            hash = hash * 31 + r;
        }
        static unordered_map<int, int> memo;
        if (memo.count(hash)) return memo[hash];

        int max_happy = 0;
        for (int i = 0; i < batchSize; ++i) {
            if (state[i] > 0) {
                --state[i];
                max_happy = max(max_happy, dfs(state, (carry + i) % batchSize) + (carry == 0 ? 1 : 0));
                ++state[i];
            }
        }
        return memo[hash] = max_happy;
    };

    return dfs(remainders, 0) + remainders[0];
}

int main() {
    vector<int> groups1 = {1, 2, 3, 4, 5, 6};
    vector<int> groups2 = {1, 3, 2, 5, 2, 2, 1, 6};
    cout << maxHappyGroups(3, groups1) << endl; // Output: 4
    cout << maxHappyGroups(4, groups2) << endl; // Output: 4
    return 0;
}
